@page "/visitor-sign-out"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using VisitorDTOs;
@using VisitorDTOs.VisitorDTO

<div style="min-height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center; background: linear-gradient(to bottom, #6610f2, #8b5cf6, #6f42c1); color: white;">
    <button @onclick="NavigateToHome" class="btn btn-light" style="position: absolute; top: 20px; right: 20px; font-weight: bold;">Home</button>

    <h3 class="text-center mb-4" style="font-weight: bold;">Visitor Sign-Out</h3>

    <div class="p-4 rounded" style="background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.3); border-radius: 10px; width: 100%; max-width: 400px;">
        @if (!SignOutComplete)
        {
            <div>
                <!-- Email Input -->
                <div class="mb-3">
                    <label>Email:</label>
                    <InputText @bind-Value="Visitor.Email" class="form-control" />
                    @if (ValidationErrors.ContainsKey(nameof(Visitor.Email)))
                    {
                        <span class="text-danger">@ValidationErrors[nameof(Visitor.Email)]</span>
                    }
                </div>

                <!-- Sign-Out Button -->
                <button @onclick="HandleSignOut" class="btn btn-danger w-100" style="font-weight: bold;">Sign Out</button>

                @if (ErrorMessage != null)
                {
                    <p class="text-danger text-center mt-3">@ErrorMessage</p>
                }
            </div>
        }
        else
        {
            <!-- Thank You Message -->
            <div class="text-center">
                <h4 class="text-success mt-4">@SuccessMessage</h4>
                <p class="text-muted mt-2">Thank you for your visit! You are always welcome.</p>
                <p class="text-muted mt-2">Redirecting to home...</p>
            </div>
        }
    </div>
</div>

@code {
    private SignOutVisitorDTO Visitor = new SignOutVisitorDTO();
    private Dictionary<string, string> ValidationErrors = new();
    private string? SuccessMessage;
    private string? ErrorMessage;
    private bool SignOutComplete = false;

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleSignOut()
    {
        ValidationErrors.Clear();
        ErrorMessage = null;

        // Validate input
        if (string.IsNullOrWhiteSpace(Visitor.Email))
        {
            ValidationErrors[nameof(Visitor.Email)] = "Email is required.";
            ErrorMessage = "Please correct the errors above.";
            StateHasChanged(); // Trigger UI update after validation error
            return;
        }

        // Attempt sign-out
        var response = await Http.PostAsJsonAsync("api/signout", Visitor);

        if (response.IsSuccessStatusCode)
        {
            // Success
            SuccessMessage = "You have successfully signed out.";
            SignOutComplete = true;

            // Trigger re-render to show success message
            StateHasChanged();

            // Wait for 4 seconds and then redirect
            await Task.Delay(4000);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Handle error
            ErrorMessage = "An error occurred during sign-out. Please try again.";
            StateHasChanged(); // Trigger UI update after setting error message
        }
    }
}
