@page "/visitor-sign-in"
@using System.Text.Json
@using VisitorDTOs.VisitorDTO
@inject HttpClient Http
@inject IValidator<SignInVisitorDTO> Validator
@inject NavigationManager NavigationManager
@using FluentValidation
@using FluentValidation.Results
@using VisitorDTOs;

<div style="min-height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center; background: linear-gradient(to bottom, #6610f2, #8b5cf6, #6f42c1); color: white;">
    <button @onclick="NavigateToHome" class="btn btn-light" style="position: absolute; top: 20px; right: 20px; font-weight: bold;">Home</button>

    <h3 class="text-center mb-4" style="font-weight: bold;">Visitor Sign-In</h3>

    <div class="p-4 rounded" style="background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.3); border-radius: 10px; width: 100%; max-width: 400px;">
        <EditForm Model="Visitor" OnValidSubmit="HandleValidSubmit">
            <ValidationSummary Model="Visitor" ExcludePropertyExpressions="new[] { nameof(Visitor.VisitingCompanyId), nameof(Visitor.AppointmentWithId) }" />

            <!-- Row for Name and Email -->
            <div class="mb-3">
                <label>Name:</label>
                <InputText @bind-Value="Visitor.Name" class="form-control" />
                @if (ValidationErrors.ContainsKey(nameof(Visitor.Name)))
                {
                    <span class="text-danger">@ValidationErrors[nameof(Visitor.Name)]</span>
                }
            </div>

            <div class="mb-3">
                <label>Email:</label>
                <InputText @bind-Value="Visitor.Email" type="email" class="form-control" />
                @if (ValidationErrors.ContainsKey(nameof(Visitor.Email)))
                {
                    <span class="text-danger">@ValidationErrors[nameof(Visitor.Email)]</span>
                }
            </div>

            <!-- Company -->
            <div class="mb-3">
                <label>Company:</label>
                <InputText @bind-Value="Visitor.Company" class="form-control" placeholder="Optional" />
            </div>

            <!-- Visiting Company -->
            <div class="mb-3">
                <label>Visiting Company:</label>
                <InputSelect @bind-Value="Visitor.VisitingCompanyId" class="form-control" @oninput="OnVisitingCompanyChanged">
                    <option value="">--Select Company--</option>
                    @foreach (var company in Companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </InputSelect>
                @if (ValidationErrors.ContainsKey(nameof(Visitor.VisitingCompanyId)))
                {
                    <span class="text-danger">@ValidationErrors[nameof(Visitor.VisitingCompanyId)]</span>
                }
            </div>

            <!-- Appointment -->
            <div class="mb-3">
                <label>Appointment With:</label>
                <InputSelect @bind-Value="Visitor.AppointmentWithId" class="form-control">
                    <option value="">--Select Employee--</option>
                    @if (AppointmentOptions.Any())
                    {
                        @foreach (var employee in AppointmentOptions)
                        {
                            <option value="@employee.Id">@employee.Name</option>
                        }
                    }
                    else
                    {
                        <option disabled>No employees available</option>
                    }
                </InputSelect>
                @if (ValidationErrors.ContainsKey(nameof(Visitor.AppointmentWithId)))
                {
                    <span class="text-danger">@ValidationErrors[nameof(Visitor.AppointmentWithId)]</span>
                }
            </div>

            <!-- Submit -->
            <button type="submit" class="btn btn-light w-100" style="color: #6f42c1; font-weight: bold;">Sign In</button>

            @if (SuccessMessage != null)
            {
                <p class="text-success text-center mt-3">@SuccessMessage</p>
            }

            @if (ErrorMessage != null)
            {
                <p class="text-danger text-center mt-3">@ErrorMessage</p>
            }
        </EditForm>
    </div>
</div>

@code {
    private SignInVisitorDTO Visitor = new();
    private List<CompanyDTO> Companies = new();
    private List<EmployeeDTO> AppointmentOptions = new();
    private Dictionary<string, string> ValidationErrors = new();
    private string? SuccessMessage;
    private string? ErrorMessage;
    private SiginErrorApiResponse resposeError = new();

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/companies");

        if (response.IsSuccessStatusCode)
        {
            string jsonResp = await response.Content.ReadAsStringAsync();
            var companyResp = JsonSerializer.Deserialize<CompanyResponse>(jsonResp, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            Companies = companyResp?.Values ?? new List<CompanyDTO>();
        }
    }

    private async Task OnVisitingCompanyChanged(ChangeEventArgs e)
    {
        AppointmentOptions.Clear();

        if (long.TryParse(e.Value?.ToString(), out var companyId) && companyId > 0)
        {
            Visitor.VisitingCompanyId = companyId;

            try
            {
                var response = await Http.GetAsync($"api/company/{companyId}/employees");

                if (response.IsSuccessStatusCode)
                {
                    var employeeResponse = await response.Content.ReadFromJsonAsync<EmployeeApiResponse>();
                    AppointmentOptions = employeeResponse?.Values ?? new List<EmployeeDTO>();
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    AppointmentOptions = new List<EmployeeDTO>();
                }
                else
                {
                    ErrorMessage = "Unable to fetch employees for the selected company.";
                    StateHasChanged();
                }
            }
            catch (Exception)
            {
                ErrorMessage = "An error occurred while fetching employees.";
                StateHasChanged();
            }
        }
        else
        {
            Visitor.VisitingCompanyId = 0;
        }
    }

    private async Task HandleValidSubmit()
    {
        ValidationResult result = await Validator.ValidateAsync(Visitor);

        if (!result.IsValid)
        {
            ValidationErrors.Clear();
            foreach (var error in result.Errors)
            {
                ValidationErrors[error.PropertyName] = error.ErrorMessage;
            }
            ErrorMessage = "Please correct the errors and try again.";
            SuccessMessage = null;
        }
        else
        {
            ValidationErrors.Clear();
            ErrorMessage = null;

            var response = await Http.PostAsJsonAsync("api/signin", Visitor);

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Visitor signed in successfully.";
                Visitor = new SignInVisitorDTO();
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                resposeError = await response.Content.ReadFromJsonAsync<SiginErrorApiResponse>(new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                ErrorMessage = resposeError.errors;
                StateHasChanged();
            }
        }
    }
}
