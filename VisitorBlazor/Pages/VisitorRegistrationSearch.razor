@page "/admin/visitor-registration-search"
@using System.Text.Json
@using VisitorDTOs
@inject HttpClient Http

<h3>Visitor Registration Search</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-2">
        @ErrorMessage
    </div>
}

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success mt-2">
        @SuccessMessage
    </div>
}

<div class="mb-3">

    <input type="text" id="companyName" class="form-control" placeholder="Search" @bind="search" />
    <button class="btn btn-success mt-2" @onclick="FetchVisitorRegistrationSearch">Search</button>

</div>



<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Company</th>
            <th>Visiting Company</th>
            <th>Appointment With</th>
            <th>Date</th>
            <th>Time Spent</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var visitors in visitorRegistrationSearch)
        {
            <tr>
                <td>@visitors.Name</td>
                <td>@visitors.Company</td>
                <td>@visitors.VisitingComapanyName</td>
                <td>@visitors.AppointmentWithEmployeeName</td>
                <td>@visitors.Date</td>
                <td>@visitors.TimeSpent</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<VisitorRegistrationSearchDTO> visitorRegistrationSearch = new();
    private string search = "";
    private string ErrorMessage;
    private string SuccessMessage;

    // Fetch companies from the API
    private async Task FetchVisitorRegistrationSearch()
    {

        var response = await Http.GetAsync($"api/registration-search/{search}");

        if (response.IsSuccessStatusCode)
        {
            var companyResp = await response.Content.ReadFromJsonAsync<VisitorRegistrationSearchApiResponse>(new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            if (companyResp.Values.Count < 1)
            {
                ErrorMessage = "Not Found!";
                ClearMessages();
            }
            else
            {
                visitorRegistrationSearch = companyResp?.Values ?? new List<VisitorRegistrationSearchDTO>();
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ErrorMessage = errorMessage;
            ClearMessages();
        }
    }

    // Clear success and error messages after a short delay
    private void ClearMessages()
    {
        Task.Delay(3000).ContinueWith(_ =>
        {
            SuccessMessage = string.Empty;
            ErrorMessage = string.Empty;
            StateHasChanged();
        });
    }
}