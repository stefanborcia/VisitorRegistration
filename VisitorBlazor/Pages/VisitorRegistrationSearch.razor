@page "/admin/visitor-registration-search"
@using System.Text.Json
@using VisitorDTOs
@inject HttpClient Http
<div style="min-height: 100vh; display: flex; flex-direction: column;padding:150px; background: linear-gradient(to bottom, #6610f2, #8b5cf6, #6f42c1); color: white;">
<h3 class="text-center pb-3">Visitor Registration Search</h3>
    <div style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
        <NavLink class="btn btn-admin-panel" href="/admin">
            Admin Panel
        </NavLink>
    </div>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-2">
        @ErrorMessage
    </div>
}

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success mt-2">
        @SuccessMessage
    </div>
}

<div class="d-flex justify-content-center align-items-center">
    <div class="d-flex align-items-center mb-4" style="width: 50%; max-width: 500px;">
        <input type="text" id="companyName" class="form-control me-2" placeholder="Search" @bind="search" />
        <button class="btn btn-success" @onclick="FetchVisitorRegistrationSearch">Search</button>
    </div>
</div>



<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Company</th>
            <th>Visiting Company</th>
            <th>Appointment With</th>
            <th>Date</th>
            <th>Time Spent</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var visitors in visitorRegistrationSearch)
        {
            <tr class="text-white">
                <td>@visitors.Name</td>
                <td>@visitors.Company</td>
                <td>@visitors.VisitingComapanyName</td>
                <td>@visitors.AppointmentWithEmployeeName</td>
                <td>@visitors.Date</td>
                <td>@visitors.TimeSpent</td>
            </tr>
        }
    </tbody>
</table>
</div>
@code {
    private List<VisitorRegistrationSearchDTO> visitorRegistrationSearch = new();
    private string search = "";
    private string? ErrorMessage;
    private string? SuccessMessage;


    private async Task FetchVisitorRegistrationSearch()
    {
        // Check if search input is empty
        if (string.IsNullOrWhiteSpace(search))
        {
            ErrorMessage = "Search input cannot be empty. Please enter a name, company, or date...";
            ClearMessages();
            return;
        }

        try
        {
            var response = await Http.GetAsync($"api/registration-search/{search}");

            if (response.IsSuccessStatusCode)
            {
                var companyResp = await response.Content.ReadFromJsonAsync<VisitorRegistrationSearchApiResponse>(new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (companyResp?.Values.Count < 1)
                {
                    ErrorMessage = "No visitors found.";
                    visitorRegistrationSearch.Clear();
                    ClearMessages();
                }
                else
                {
                    visitorRegistrationSearch = companyResp.Values;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorMessage = "No visitors found matching the criteria.";
                ClearMessages();
            }
            else
            {
                ErrorMessage = "An unexpected error occurred. Please try again.";
                ClearMessages();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
            ClearMessages();
        }
    }

    // Clear success and error messages after a short delay
    private void ClearMessages()
    {
        Task.Delay(3000).ContinueWith(_ =>
        {
            SuccessMessage = string.Empty;
            ErrorMessage = string.Empty;
            StateHasChanged();
        });
    }
}